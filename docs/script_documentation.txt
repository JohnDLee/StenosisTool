broken_data:
    - contains data that currently doesn't work

data:
    - contains data for healthy/stenosis models
    - summary data found in data/data.xlsx

docs
    - contains info about project

    filelog.txt
        - contains information about what each file does
    
    research.txt
        - contains information about what research was done

    todo.txt
        - contains information about what needs to be done

notebooks
    - Contains ipynb notebooks for the project

scripts
    - scripts beginning w/ sv must be run with simvascular

    dev_scripts (scripts used to configure isolated solver directories)

        sv_dev_centerlines_gen.py 
            - generates a centerline file for a model
        
        sv_dev_segmentation_gen.py
            - generates a 0D segmentation for a model

        dev_configure_base_solver.py
            - copies all relevant files into a base_solver_dir
        
    stenosis_tool_scripts (scripts for stenosis tool)

        artificial_stenosis_driver.py
            - From a healthy pulmonary tree, selects n locations from the first g generations and creates a solver file with area reductions in (o1, o2) occlusion range
            - [changes to how the n is selected, make it more similar to a true stenosis]
        
        stenosis_detection_driver.py
            - From a stenosis pulmonary tree, computes control resistances and compares the vessels of the stenosis model in the first g generations. If a certain branch/segment resistance is r_threshold times higher than the control, it is considered a stenosed vessel
            - Generates a pseuo-fixed version of the input file that replaces stenosis vessels with their control
            - [changes to how stenosis is considered]
        
    
    three_d

        correct_healthy_3D.py (deprecated)
            - given a Simulation files in the model directory, copies over files and replaces parameters/bc with 0D tuned versions
            - only for healthy models
        
        compare_3D_0D.py
            - Computes error terms between 0D and 3D
        
        extract_3D_centerlines.py
            - Given 3D vtu file and centerlines, map 3D to 1D centerlines 
            - Will take hours, so this should be performed on cluster
            - stand alone/Does not utilize src operations

        summarize_3d.py
            - given 3D centerlines from extract_3D_centerlines.py, summarize information to match 0D solver
        
    viz_script

        zerod_to_geom.py(yet to be fixed)
            - Takes in a solver file with a branch_results.npy file in the same directory and maps it back to the centerline geometry
            - Also constructs a resistance map


    add_solver_rcrs.py
        - For a solver directory, add the rcrt.dat file to the input file

    jc_model_construction.py
        - Constructs a default JC model directory
    
    optimization_driver.py
        - Optimizes a healthy model's bc
    
    run_zerod_sim.py
        - Runs a zerod simulation of a solver directory, with the option to recursively solve every single solver file excluding tuning solvers

    vessel_sanity_check.py
        - given a results file, sanity checks the inputs and output results of each vessel segment

scratch
    - where scratch work is done

src
    - contains modules for project

    bc.py
        - Contains BoundaryConditions class

    centerlines.py
        - Contains centerlines class for handling centerlines

    data_org.py
        - Contains DataPath class for managing relevant data
    
    file_io.py
        - Contains other file IO operations

    solver.py
        - Contains Solver0D class which handle most solver operations/conversions

    solver_results.py
        - Contains SolverResults class which handles most solver results of 0D simulations

    flow.py
        - Contains Inflow class for handling inflow file operations

    run_sim.py
        - Contains functions to run 0D simulations and visualize results

    misc.py
        - Contains basic utility functions













